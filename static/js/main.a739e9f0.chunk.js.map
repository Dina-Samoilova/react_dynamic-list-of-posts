{"version":3,"sources":["components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/api.ts","api/posts.ts","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["Loader","className","PostsList","posts","postId","selectPostId","length","map","post","userId","title","body","type","onClick","id","NewCommentForm","createComment","useState","setBody","email","setEmail","userName","setName","isValidForm","setIsValidForm","validator","changeInput","event","target","name","value","resetForm","validation","useMemo","test","onSubmit","a","preventDefault","useEffect","placeholder","classNames","onChange","request","url","method","fetch","then","response","ok","json","Promise","reject","Error","status","statusText","getUserPosts","undefined","getPostDetails","result","getPostComments","PostDetails","comments","setComments","postDetail","setPost","hideComments","setHideComments","loadPost","loadComments","commentsList","deletingComment","prevState","filter","comment","JSON","stringify","headers","postNewComment","newComment","Date","now","App","setPosts","setUserId","users","setUsers","selectedPostId","setSelectedPostId","loadPosts","postsList","loadUsers","usersList","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a739e9f0.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Posts[],\n  postId: number,\n  selectPostId: (postId: number) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  postId,\n  selectPostId,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    {posts.length === 0\n      ? <Loader />\n      : (\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li\n              key={post.id}\n              className=\"PostsList__item\"\n            >\n              <div>\n                <b>\n                  {`[User #${post.userId}]: `}\n                </b>\n                <b>{post.title}</b>\n                <p>{post.body}</p>\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => selectPostId(post.id)}\n              >\n                {postId === post.id ? 'Close' : 'Open'}\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n  </div>\n);\n","import React, { useMemo, useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number,\n  createComment: (body: string, email:string, name: string) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  createComment,\n}) => {\n  const [body, setBody] = useState('');\n  const [email, setEmail] = useState('');\n  const [userName, setName] = useState('');\n  const [isValidForm, setIsValidForm] = useState(true);\n\n  // eslint-disable-next-line no-useless-escape\n  const validator = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n  const changeInput = (event: React.ChangeEvent<HTMLInputElement\n  | HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n\n    setIsValidForm(true);\n\n    switch (name) {\n      case 'body':\n        setBody(value);\n        break;\n\n      case 'email':\n        setEmail(value);\n        break;\n\n      case 'name':\n        setName(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const resetForm = () => {\n    setBody('');\n    setEmail('');\n    setName('');\n    setIsValidForm(true);\n  };\n\n  const validation = useMemo(() => {\n    return (userName.length > 0\n      && body.length > 0\n      && validator.test(email)\n    );\n  }, [email, body, userName]);\n\n  const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (validation) {\n      createComment(body, email, userName);\n      resetForm();\n    } else {\n      setIsValidForm(false);\n    }\n  };\n\n  useEffect(() => {\n    resetForm();\n  }, [postId]);\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={onSubmit}\n    >\n      {!isValidForm && (\n        <p className=\"NewCommentForm__error\">Enter correct information</p>\n      )}\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          value={userName}\n          className={classNames(\n            'NewCommentForm__input',\n            {\n              'NewCommentForm__input--error':\n                (!isValidForm && userName.length === 0),\n            },\n          )}\n          onChange={changeInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          value={email}\n          className={classNames(\n            'NewCommentForm__input',\n            {\n              'NewCommentForm__input--error':\n                (!isValidForm && !validator.test(email)),\n            },\n          )}\n          onChange={changeInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          value={body}\n          className={classNames(\n            'NewCommentForm__input',\n            {\n              'NewCommentForm__input--error':\n                (!isValidForm && body.length === 0),\n            },\n          )}\n          onChange={changeInput}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, method?: RequestInit | undefined) => {\n  return fetch(`${BASE_URL}${url}`, method)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`),\n        );\n      }\n\n      return response.json();\n    });\n};\n","import { request } from './api';\n\nexport const getUserPosts = (userId?: number) => {\n  if (userId === undefined || userId === 0) {\n    return request('/posts');\n  }\n\n  return request(`/posts?userId=${userId}`);\n};\n\nexport const getPostDetails = (postId: number) => {\n  const result = request(`/posts/${postId}/`);\n\n  if (!result) {\n    return {\n      id: 0,\n      userId: 0,\n      title: '',\n      body: '',\n    };\n  }\n\n  return result;\n};\n","import { request } from './api';\n\nexport const getPostComments = (postId: number) => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const postNewComment = (\n  postId: number,\n  body: string,\n  email: string,\n  name: string,\n) => {\n  return request('/comments', {\n    method: 'POST',\n    body: JSON.stringify({\n      postId,\n      body,\n      email,\n      name,\n    }),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n","import React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport {\n  deleteComment,\n  getPostComments,\n  postNewComment,\n} from '../../api/comments';\n\ntype Props = {\n  postId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  postId,\n}) => {\n  const [comments, setComments] = useState<Comments[]>([]);\n  const [postDetail, setPost] = useState<Posts | null>(null);\n  const [hideComments, setHideComments] = useState(false);\n\n  const loadPost = async () => {\n    const post = await getPostDetails(postId);\n\n    setPost(post);\n  };\n\n  const loadComments = async () => {\n    const commentsList = await getPostComments(postId);\n\n    setComments(commentsList);\n  };\n\n  const createComment = (body: string, email: string, userName: string) => {\n    postNewComment(postId, body, email, userName);\n\n    const newComment = {\n      id: Date.now(),\n      postId,\n      body,\n      email,\n      name: userName,\n    };\n\n    setComments(prevState => ([\n      ...prevState,\n      newComment,\n    ]));\n  };\n\n  const deletingComment = (id: number) => {\n    deleteComment(id);\n\n    setComments(prevState => prevState.filter(comment => comment.id !== id));\n  };\n\n  useEffect(() => {\n    setPost(null);\n    setComments([]);\n    loadPost();\n    loadComments();\n  }, [postId]);\n\n  const visiblityOfComments = () => {\n    setHideComments(prevState => !prevState);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {postDetail && (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>\n              {postDetail.body}\n            </p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {comments.length > 0 && (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={visiblityOfComments}\n              >\n                {hideComments ? 'Show ' : 'Hide '}\n                {comments.length}\n                {comments.length > 1 ? ' comments' : ' comment'}\n              </button>\n            )}\n            {!hideComments && (\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li\n                    key={comment.id}\n                    className=\"PostDetails__list-item\"\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => deletingComment(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={postId}\n                createComment={createComment}\n              />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Posts[]>([]);\n  const [userId, setUserId] = useState<number | undefined>();\n  const [users, setUsers] = useState<Users[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const loadPosts = async () => {\n    const postsList = await getUserPosts(userId);\n\n    setPosts(postsList);\n  };\n\n  const loadUsers = async () => {\n    const usersList = await getUsers();\n\n    setUsers(usersList);\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, [userId]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const selectedUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n  };\n\n  const selectPostId = (postId: number) => {\n    setSelectedPostId(postId === selectedPostId ? 0 : postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={selectedUser}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            postId={selectedPostId}\n            selectPostId={selectPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0\n            && (\n              <PostDetails\n                postId={selectedPostId}\n              />\n            )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = () => {\n  return request('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}